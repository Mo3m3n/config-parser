// Code generated by go generate; DO NOT EDIT.
/*
Copyright 2019 HAProxy Technologies

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

package tests

import (
	"fmt"
	"strings"
	"testing"

	"github.com/haproxytech/config-parser/v2/parsers"
)

func TestBind(t *testing.T) {
	tests := map[string]bool{
		"bind :80,:443": true,
		"bind 10.0.0.1:10080,10.0.0.1:10443": true,
		"bind /var/run/ssl-frontend.sock user root mode 600 accept-proxy": true,
		"bind :80": true,
		"bind :443 ssl crt /etc/haproxy/site.pem": true,
		"bind :443 ssl crt /etc/haproxy/site.pem alpn h2,http/1.1": true,
		"bind :::443 v4v6 ssl crt /etc/haproxy/site.pem alpn h2,http/1.1": true,
		"bind ipv6@:80": true,
		"bind ipv4@public_ssl:443 ssl crt /etc/haproxy/site.pem": true,
		"bind unix@ssl-frontend.sock user root mode 600 accept-proxy": true,
		"bind": false,
		"---": false,
		"--- ---": false,
	}
	parser := &parsers.Bind{}
	for command, shouldPass := range tests {
		t.Run(command, func(t *testing.T) {
		line :=strings.TrimSpace(command)
		lines := strings.SplitN(line,"\n", -1)
		var err error
		parser.Init()
		if len(lines)> 1{
			for _,line = range(lines){
			  line = strings.TrimSpace(line)
				if err=ProcessLine(line, parser);err!=nil{
					break
				}
			}
		}else{
			err = ProcessLine(line, parser)
		}
			if shouldPass {
				if err != nil {
					t.Errorf(err.Error())
					return
				}
				result, err := parser.Result()
				if err != nil {
					t.Errorf(err.Error())
					return
				}
				var returnLine string
				if result[0].Comment == "" {
					returnLine = result[0].Data
				} else {
					returnLine = fmt.Sprintf("%s # %s", result[0].Data, result[0].Comment)
				}
				if command != returnLine {
					t.Errorf(fmt.Sprintf("error: has [%s] expects [%s]", returnLine, command))
				}
			} else {
				if err == nil {
					t.Errorf(fmt.Sprintf("error: did not throw error for line [%s]", line))
				}
				_, parseErr := parser.Result()
				if parseErr == nil {
					t.Errorf(fmt.Sprintf("error: did not throw error on result for line [%s]", line))
				}
			}
		})
	}
}
